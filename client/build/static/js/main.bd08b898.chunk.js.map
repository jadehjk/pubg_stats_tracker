{"version":3,"sources":["SearchBar.js","MatchListItem.js","App.tsx","reportWebVitals.js","index.js"],"names":["SearchBar","props","useState","names","setNames","className","FormControl","Input","value","onChange","event","stopPropagation","target","endAdornment","InputAdornment","position","IconButton","aria-label","onClick","placeholder","Button","variant","color","onPlayersSearch","MatchListItem","expanded","setExpanded","getRank","rank","teams","match","players","map","player","ListItem","ListItemText","primary","name","secondary","damage","kills","length","date","button","id","Collapse","in","unmountOnExit","List","team","App","matches","setMatches","errorMsg","setErrorMsg","getDateDifference","today","matchDate","diffTime","Math","abs","getTime","ceil","parseMatches","commonMatches","parsedNames","tempMatches","Date","forEach","tempMatch","data","attributes","createdAt","included","type","push","playerIds","relationships","participants","p","stats","assists","parseInt","damageDealt","timeSurvived","winPlace","isTarget","includes","playerId","sort","x","y","targetTeams","nonTargetTeams","teamsLength","i","concat","getMatches","matchUrls","a","axios","get","response","status","playerNames","replace","slice","split","console","log","totalMatches","matchIds","_","intersection","apply","getPlayers","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd08b898.chunk.js","sourcesContent":["import './SearchBar.css';\r\nimport { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport { FormControl, Input } from '@material-ui/core';\r\n\r\n\r\nfunction SearchBar(props) {\r\n    const [names, setNames] = useState('');\r\n\r\n    function handleSearch() {\r\n        props.onPlayersSearch(names);\r\n    }\r\n\r\n    function handleInput(event) {\r\n        event.stopPropagation();\r\n        setNames(event.target.value)\r\n    }\r\n\r\n    function handleClearInput() {\r\n        setNames('');\r\n    }\r\n    \r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <div className=\"SearchBarText\">\r\n            <FormControl>\r\n                <Input\r\n                    value={names}\r\n                    onChange={handleInput}\r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton aria-label=\"clear\" onClick={handleClearInput}>\r\n                                <ClearIcon />\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    }\r\n                    placeholder=\"Player1, Player2, etc.\"\r\n                >\r\n\r\n                </Input>\r\n            </FormControl>\r\n        </div>\r\n       \r\n        \r\n        <Button\r\n            className=\"SearchBarButton\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={handleSearch}\r\n        > Search\r\n        </Button>\r\n        \r\n      </div>\r\n    );\r\n}\r\n\r\nexport default SearchBar;","import './MatchListItem.css';\r\nimport { useState } from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport Collapse from '@material-ui/core/Collapse';\r\n\r\n\r\nfunction MatchListItem(props) {\r\n    const [expanded, setExpanded] = useState(false);\r\n\r\n    function handleExpand() {\r\n        setExpanded(!expanded);\r\n    }\r\n\r\n    function getRank(rank, teams) {\r\n        return `${rank}/${teams}`\r\n    }\r\n\r\n    return (\r\n      <div key={props.match.id} className=\"MatchListItem\">\r\n          <div key={props.match.teams[0].id} className=\"MatchGroup\">\r\n            {props.match.teams[0].players?.map(player => (\r\n                <ListItem key={player.name}>\r\n                    <ListItemText primary={player.name} secondary={`Damage: ${player.damage} Kills: ${player.kills}`} />\r\n                </ListItem>\r\n            ))}\r\n            <span className=\"Rank\">{getRank(props.match.teams[0].rank, props.match.teams.length)}</span>\r\n            <span className=\"DaysSince\">{`${props.match.date} days ago`}</span>\r\n            <ListItem key={props.match.teams[0].id} button onClick={() => handleExpand()}>\r\n                { expanded ? <ExpandLess /> : <ExpandMore />}\r\n            </ListItem>\r\n        </div>\r\n        <Collapse key={props.match.id} in={expanded} unmountOnExit>\r\n            <List key={props.match.id}>\r\n                {props.match.teams.map(team => (\r\n                    <div key={team.id}>\r\n                        <List key={team.id}>\r\n                            <div className=\"MatchGroup\">\r\n                                {team.players?.map(player => (\r\n                                    <ListItem key={player.name}>\r\n                                        <ListItemText primary={player.name} secondary={`Damage: ${player.damage} Kills: ${player.kills}`} />\r\n                                    </ListItem>\r\n                                ))}\r\n                                <div className=\"MatchGroup\">\r\n                                    <span>{getRank(team.rank, props.match.teams.length)}</span>\r\n                                </div>\r\n                            </div>\r\n                        </List>\r\n                    </div>\r\n                ))}\r\n            </List>\r\n        </Collapse>\r\n      </div>  \r\n    );\r\n}\r\n\r\nexport default MatchListItem;","import './App.css';\nimport axios from \"axios\";\nimport { useState } from 'react';\nimport SearchBar from './SearchBar';\nimport MatchListItem from './MatchListItem';\nimport _ from 'lodash';\nimport List from '@material-ui/core/List';\n\nfunction App() {\n  const [matches, setMatches] = useState<Match[]>([]);\n  const [errorMsg, setErrorMsg] = useState('');\n\n    interface Match {\n        id?: string;\n        teams?: Team[];\n        date?: number;\n    }\n\n    interface Team {\n        id?: string;\n        playerIds?: string[];\n        players?: Player[];\n        rank?: number;\n        isTarget?: boolean;\n    }\n\n    interface Player {\n        assists?: number;\n        damage?: number;\n        kills?: number;\n        timeSurvived?: number;\n        rank?: number;\n        name?: string;\n        isTarget?: boolean;\n    }\n\n    function getDateDifference(today: Date, matchDate: Date) {\n        const diffTime = Math.abs(today.getTime() - matchDate.getTime());\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n        return diffDays;\n    }\n\n    function parseMatches(commonMatches: any[], parsedNames) {\n        let tempMatches = commonMatches;\n        let teams: Team[] = [];\n        let matches: Match[] = [];\n        let players: Record<string, Player> = {};\n        if (!tempMatches || !tempMatches[0]) {\n            setErrorMsg('Could not find players with the provided name. Please make sure that the names are cased correctly.')\n            return;\n        }\n        let date = new Date();\n        tempMatches[0].forEach((tempMatch: any) => {\n            let matchDate = new Date(tempMatch.data.attributes.createdAt);\n            tempMatch.included.forEach((player: any) => {\n                if (player.type === 'roster') {\n                    teams.push({\n                        id: player.id,\n                        playerIds: player.relationships.participants.data.map((p: any) => p.id),\n                        rank: player.attributes.stats.rank,\n                        players: []\n                    })\n                }\n                if (player.type === 'participant') {\n                    players[player.id] = {\n                        assists: player.attributes.stats.assists,\n                        damage: parseInt(player.attributes.stats.damageDealt),\n                        kills: player.attributes.stats.kills,\n                        timeSurvived: player.attributes.stats.timeSurvived / 60,\n                        rank: player.attributes.stats.winPlace,\n                        name: player.attributes.stats.name,\n                        isTarget: parsedNames.includes(player.attributes.stats.name)\n                    }\n                }\n            })\n            teams.forEach(team => {\n                team.playerIds!.forEach(playerId => {\n                    team.players!.push(players[playerId])\n                    if (players[playerId].isTarget) {\n                        team.isTarget = true;\n                    }\n                })\n            })\n            teams.sort((x, y) => x.rank! - y.rank!);\n            let targetTeams = [];\n            let nonTargetTeams = [];\n            let teamsLength = teams.length;\n            for (let i = 0; i < teamsLength; ++i) {\n                if (teams[i].isTarget) {\n                    targetTeams.push(teams[i]);\n                } else {\n                    nonTargetTeams.push(teams[i]);\n                }\n            }\n            matches.push({\n                id: tempMatch.data.id,\n                teams: targetTeams.concat(nonTargetTeams),\n                date: getDateDifference(date, matchDate)\n            })\n            teams = [];\n            players = {};\n        })\n        setMatches([...matches]);\n    }\n\n    async function getMatches(matchUrls, parsedNames) {\n        if (matchUrls.length < 1) {\n            setErrorMsg('Could not find players with the provided name. Please make sure that the names are cased correctly.')\n            return;\n        }\n        for (let i = 0; i < matchUrls.length; ++i) {\n            matchUrls[i] = `https://api.pubg.com/shards/steam/matches/${matchUrls[i]}`;\n        }\n            let response = await axios.get(`/matches?matchUrls=${matchUrls}`);\n            if (response.data.status && response.data.status === 400) {\n                setErrorMsg('Could not find players with the provided name. Please make sure that the names are cased correctly.')\n                return;\n            }\n            parseMatches(response.data, parsedNames);\n    }\n\n   async function getPlayers(names: string) {\n        const playerNames = names.replace(/\\s+/g, '');\n        if (playerNames[playerNames.length - 1] === ',') {\n            playerNames.slice(0, -1);\n        }\n        let parsedNames = playerNames.split(',');\n        let response: any = await axios.get(`/players?names=${playerNames}`);\n        console.log(response);\n        if (response.data.status && response.data.status === 400) {\n            setErrorMsg('Could not find players with the provided name. Please make sure that the names are cased correctly.')\n            return;\n        }\n        let totalMatches: string[] = [];\n        response.data.data.forEach((players: any) => {\n            let matchIds: any = [];\n            players.relationships.matches.data.forEach((match: Record<string, string>) => {\n                matchIds.push(match);\n            })\n            totalMatches.push(matchIds.map((x: any) => x.id));\n        })\n        getMatches([..._.intersection.apply(_, totalMatches)], parsedNames);\n    }\n\n    function handlePlayersSearch(names: string) {\n        setMatches([]);\n        getPlayers(names);\n    }\n\n    return (\n        <div className=\"App\">\n            <SearchBar onPlayersSearch={handlePlayersSearch}/>\n            <div>\n                {errorMsg.length > 0 &&\n                    <div>{errorMsg}</div>\n                }\n                {matches.map((match) => (\n                    <div>\n                        <List key={match.id}>\n                            <MatchListItem match={match} />\n                        </List>\n                        \n                    </div>\n                    \n                ))}\n            </div>\n        </div>\n        );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}